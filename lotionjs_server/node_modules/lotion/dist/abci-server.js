"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var djson = require("deterministic-json");
var vstruct = require("varstruct");
var createServer = require('abci');
var createHash = require('crypto').createHash;
var fs = require('fs-extra');
var join = require('path').join;
function createABCIServer(stateMachine, initialState, lotionAppHome) {
    var stateFilePath = join(lotionAppHome, 'state.json');
    var height = 0;
    var abciServer = createServer({
        info: function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var stateFileExists, stateFile, _a, _b, rootHash;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, fs.pathExists(stateFilePath)];
                        case 1:
                            stateFileExists = _c.sent();
                            if (!stateFileExists) return [3 /*break*/, 3];
                            _b = (_a = djson).parse;
                            return [4 /*yield*/, fs.readFile(stateFilePath, 'utf8')];
                        case 2:
                            stateFile = _b.apply(_a, [_c.sent()]);
                            rootHash = createHash('sha256')
                                .update(djson.stringify(stateFile.state))
                                .digest();
                            stateMachine.initialize(stateFile.state, stateFile.context, true);
                            height = stateFile.height;
                            return [2 /*return*/, {
                                    lastBlockAppHash: rootHash,
                                    lastBlockHeight: stateFile.height
                                }];
                        case 3: return [2 /*return*/, {}];
                    }
                });
            });
        },
        deliverTx: function (request) {
            try {
                var tx = decodeTx(request.tx);
                try {
                    stateMachine.transition({ type: 'transaction', data: tx });
                    return {};
                }
                catch (e) {
                    return { code: 1, log: e.toString() };
                }
            }
            catch (e) {
                return { code: 1, log: 'Invalid transaction encoding' };
            }
        },
        checkTx: function (request) {
            try {
                var tx = decodeTx(request.tx);
                try {
                    stateMachine.check(tx);
                    return {};
                }
                catch (e) {
                    return { code: 1, log: e.toString() };
                }
            }
            catch (e) {
                return { code: 1, log: 'Invalid transaction encoding' };
            }
        },
        beginBlock: function (request) {
            var time = request.header.time.seconds.toNumber();
            stateMachine.transition({ type: 'begin-block', data: { time: time } });
            return {};
        },
        endBlock: function () {
            stateMachine.transition({ type: 'block', data: {} });
            var validators = stateMachine.context().validators;
            var validatorUpdates = [];
            for (var pubKey in validators) {
                validatorUpdates.push({
                    pubKey: { type: 'ed25519', data: Buffer.from(pubKey, 'base64') },
                    power: { low: validators[pubKey], high: 0 }
                });
            }
            return {
                validatorUpdates: validatorUpdates
            };
        },
        commit: function () {
            return __awaiter(this, void 0, void 0, function () {
                var data, newStateFilePath, context;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            data = stateMachine.commit();
                            height++;
                            newStateFilePath = join(lotionAppHome, "state-" + height + ".json");
                            context = Object.assign({}, stateMachine.context());
                            delete context.rootState;
                            return [4 /*yield*/, fs.writeFile(newStateFilePath, djson.stringify({
                                    context: context,
                                    state: stateMachine.query(),
                                    height: height
                                }))];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, fs.move(newStateFilePath, stateFilePath, { overwrite: true })];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, { data: Buffer.from(data, 'hex') }];
                    }
                });
            });
        },
        initChain: function (request) {
            /**
             * in next abci version, we'll get a timestamp here.
             * height is no longer tracked on info (we want to encourage isomorphic chain/channel code)
             */
            var initialInfo = buildInitialInfo(request);
            stateMachine.initialize(initialState, initialInfo);
            return {};
        },
        query: function (request) {
            var path = request.path;
            var queryResponse = stateMachine.query(path);
            var value = Buffer.from(djson.stringify(queryResponse)).toString('base64');
            return {
                value: value,
                height: height
            };
        }
    });
    return abciServer;
}
exports.default = createABCIServer;
function buildInitialInfo(initChainRequest) {
    var result = {
        validators: {}
    };
    initChainRequest.validators.forEach(function (validator) {
        result.validators[validator.pubKey.data.toString('base64')] = validator.power.toNumber();
    });
    return result;
}
var TxStruct = vstruct([
    { name: 'data', type: vstruct.VarString(vstruct.UInt32BE) },
    { name: 'nonce', type: vstruct.UInt32BE }
]);
function decodeTx(txBuffer) {
    var decoded = TxStruct.decode(txBuffer);
    var tx = djson.parse(decoded.data);
    return tx;
}
