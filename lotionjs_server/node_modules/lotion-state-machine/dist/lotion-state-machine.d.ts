/// <reference types="node" />
interface Middleware {
    type: string;
    middleware: Function;
}
export interface StateMachine {
    initialize(initialState?: any, initialContext?: any, resuming?: any): void | Promise<void>;
    transition(action: any): any;
    check?(action: any): any;
    query(query?: any): any;
    context?(): any;
    commit(): string | Buffer | Promise<string | Buffer>;
}
export declare type TransactionHandler = (state: any, tx: any, context?: any) => any;
export declare type BlockHandler = (state: any, context?: any) => any;
export declare type Initializer = (state: any, context?: any) => any;
export interface Application {
    use(txHandler: TransactionHandler | Middleware | Middleware[]): any;
    use(txHandler: string, route: TransactionHandler | Middleware | Middleware[]): any;
    useTx(txHandler: TransactionHandler): any;
    useBlock(blockHandler: BlockHandler): any;
    useInitializer(initializer: Initializer): any;
    compile?(): StateMachine;
}
export interface BaseApplicationConfig {
    initialState: object;
}
declare function LotionStateMachine(opts: BaseApplicationConfig): Application;
export default LotionStateMachine;
